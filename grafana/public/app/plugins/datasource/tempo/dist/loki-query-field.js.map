{"version":3,"file":"loki-query-field.js","mappings":"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","sources":["webpack://@grafana-plugins/tempo/../../../../../packages/grafana-e2e-selectors/src/selectors/components.ts","webpack://@grafana-plugins/tempo/../../../../../packages/grafana-e2e-selectors/src/selectors/index.ts","webpack://@grafana-plugins/tempo/../../../../../packages/grafana-e2e-selectors/src/selectors/pages.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/getOverrideServices.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/monaco-completion-provider/NeverCaseError.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/monaco-completion-provider/index.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/monaco-completion-provider/CompletionDataProvider.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/monaco-completion-provider/validation.ts","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/MonacoQueryField.tsx","webpack://@grafana-plugins/tempo/./_importedDependencies/datasources/loki/monaco-query-field/monaco-completion-provider/situation.ts"],"sourcesContent":["// NOTE: by default Component string selectors are set up to be aria-labels,\n// however there are many cases where your component may not need an aria-label\n// (a <button> with clear text, for example, does not need an aria-label as it's already labeled)\n// but you still might need to select it for testing,\n// in that case please add the attribute data-testid={selector} in the component and\n// prefix your selector string with 'data-testid' so that when create the selectors we know to search for it on the right attribute\n/**\n * Selectors grouped/defined in Components\n *\n * @alpha\n */\nexport const Components = {\n  RadioButton: {\n    container: 'data-testid radio-button',\n  },\n  Breadcrumbs: {\n    breadcrumb: (title: string) => `data-testid ${title} breadcrumb`,\n  },\n  TimePicker: {\n    openButton: 'data-testid TimePicker Open Button',\n    overlayContent: 'data-testid TimePicker Overlay Content',\n    fromField: 'data-testid Time Range from field',\n    toField: 'data-testid Time Range to field',\n    applyTimeRange: 'data-testid TimePicker submit button',\n    copyTimeRange: 'data-testid TimePicker copy button',\n    pasteTimeRange: 'data-testid TimePicker paste button',\n    calendar: {\n      label: 'data-testid Time Range calendar',\n      openButton: 'data-testid Open time range calendar',\n      closeButton: 'data-testid Close time range Calendar',\n    },\n    absoluteTimeRangeTitle: 'data-testid-absolute-time-range-narrow',\n  },\n  DataSourcePermissions: {\n    form: () => 'form[name=\"addPermission\"]',\n    roleType: 'Role to add new permission to',\n    rolePicker: 'Built-in role picker',\n    permissionLevel: 'Permission Level',\n  },\n  DateTimePicker: {\n    input: 'data-testid date-time-input',\n  },\n  DataSource: {\n    TestData: {\n      QueryTab: {\n        scenarioSelectContainer: 'Test Data Query scenario select container',\n        scenarioSelect: 'Test Data Query scenario select',\n        max: 'TestData max',\n        min: 'TestData min',\n        noise: 'TestData noise',\n        seriesCount: 'TestData series count',\n        spread: 'TestData spread',\n        startValue: 'TestData start value',\n        drop: 'TestData drop values',\n      },\n    },\n    DataSourceHttpSettings: {\n      urlInput: 'data-testid Datasource HTTP settings url',\n    },\n    Jaeger: {\n      traceIDInput: 'Trace ID',\n    },\n    Prometheus: {\n      configPage: {\n        connectionSettings: 'Data source connection URL', // aria-label in grafana experimental\n        manageAlerts: 'prometheus-alerts-manager', // id for switch component\n        scrapeInterval: 'data-testid scrape interval',\n        queryTimeout: 'data-testid query timeout',\n        defaultEditor: 'data-testid default editor',\n        disableMetricLookup: 'disable-metric-lookup', // id for switch component\n        prometheusType: 'data-testid prometheus type',\n        prometheusVersion: 'data-testid prometheus version',\n        cacheLevel: 'data-testid cache level',\n        incrementalQuerying: 'prometheus-incremental-querying', // id for switch component\n        queryOverlapWindow: 'data-testid query overlap window',\n        disableRecordingRules: 'disable-recording-rules', // id for switch component\n        customQueryParameters: 'data-testid custom query parameters',\n        httpMethod: 'data-testid http method',\n        exemplarsAddButton: 'data-testid Add exemplar config button',\n        internalLinkSwitch: 'data-testid Internal link switch',\n      },\n      queryEditor: {\n        // kickstart: '', see QueryBuilder queryPatterns below\n        explain: 'data-testid prometheus explain switch wrapper',\n        editorToggle: 'data-testid QueryEditorModeToggle', // wrapper for toggle\n        options: 'data-testid prometheus options', // wrapper for options group\n        legend: 'data-testid prometheus legend wrapper', // wrapper for multiple compomnents\n        format: 'data-testid prometheus format',\n        step: 'prometheus-step', // id for autosize component\n        type: 'data-testid prometheus type', //wrapper for radio button group\n        exemplars: 'prometheus-exemplars', // id for editor switch component\n        builder: {\n          // see QueryBuilder below for commented selectors\n          // labelSelect: 'data-testid Select label',\n          // valueSelect: 'data-testid Select value',\n          // matchOperatorSelect: 'data-testid Select match operator',\n          metricSelect: 'data-testid metric select',\n          hints: 'data-testid prometheus hints', // wrapper for hints component\n          metricsExplorer: 'data-testid metrics explorer',\n          queryAdvisor: 'data-testid query advisor',\n        },\n        code: {\n          queryField: 'data-testid prometheus query field',\n          metricsBrowser: {\n            openButton: 'data-testid open metrics browser',\n            selectMetric: 'data-testid select a metric',\n            metricList: 'data-testid metric list',\n            labelNamesFilter: 'data-testid label names filter',\n            labelValuesFilter: 'data-testid label values filter',\n            useQuery: 'data-testid use query',\n            useAsRateQuery: 'data-testid use as rate query',\n            validateSelector: 'data-testid validate selector',\n            clear: 'data-testid clear',\n          },\n        },\n      },\n      exemplarMarker: 'data-testid Exemplar marker',\n      variableQueryEditor: {\n        queryType: 'data-testid query type',\n        labelnames: {\n          metricRegex: 'data-testid label names metric regex',\n        },\n        labelValues: {\n          labelSelect: 'data-testid label values label select',\n          // metric select see queryEditor: builder for more context\n          // label select for metric filtering see queryEditor: builder for more context\n        },\n        metricNames: {\n          metricRegex: 'data-testid metric names metric regex',\n        },\n        varQueryResult: 'data-testid variable query result',\n        seriesQuery: 'data-testid prometheus series query',\n        classicQuery: 'data-testid prometheus classic query',\n      },\n      annotations: {\n        minStep: 'prometheus-annotation-min-step', // id for autosize input\n        title: 'data-testid prometheus annotation title',\n        tags: 'data-testid prometheus annotation tags',\n        text: 'data-testid prometheus annotation text',\n        seriesValueAsTimestamp: 'data-testid prometheus annotation series value as timestamp',\n      },\n    },\n  },\n  Menu: {\n    MenuComponent: (title: string) => `${title} menu`,\n    MenuGroup: (title: string) => `${title} menu group`,\n    MenuItem: (title: string) => `${title} menu item`,\n    SubMenu: {\n      container: 'data-testid SubMenu container',\n      icon: 'data-testid SubMenu icon',\n    },\n  },\n  Panels: {\n    Panel: {\n      title: (title: string) => `data-testid Panel header ${title}`,\n      headerItems: (item: string) => `data-testid Panel header item ${item}`,\n      menuItems: (item: string) => `data-testid Panel menu item ${item}`,\n      menu: (title: string) => `data-testid Panel menu ${title}`,\n      containerByTitle: (title: string) => `${title} panel`,\n      headerCornerInfo: (mode: string) => `Panel header ${mode}`,\n      status: (status: string) => `data-testid Panel status ${status}`,\n      loadingBar: () => `Panel loading bar`,\n      HoverWidget: {\n        container: 'data-testid hover-header-container',\n        dragIcon: 'data-testid drag-icon',\n      },\n      PanelDataErrorMessage: 'data-testid Panel data error message',\n    },\n    Visualization: {\n      Graph: {\n        container: 'Graph container',\n        VisualizationTab: {\n          legendSection: 'Legend section',\n        },\n        Legend: {\n          legendItemAlias: (name: string) => `gpl alias ${name}`,\n          showLegendSwitch: 'gpl show legend',\n        },\n        xAxis: {\n          labels: () => 'div.flot-x-axis > div.flot-tick-label',\n        },\n      },\n      BarGauge: {\n        /**\n         * @deprecated use valueV2 from Grafana 8.3 instead\n         */\n        value: 'Bar gauge value',\n        valueV2: 'data-testid Bar gauge value',\n      },\n      PieChart: {\n        svgSlice: 'data testid Pie Chart Slice',\n      },\n      Text: {\n        container: () => '.markdown-html',\n      },\n      Table: {\n        header: 'table header',\n        footer: 'table-footer',\n        body: 'data-testid table body',\n      },\n    },\n  },\n  VizLegend: {\n    seriesName: (name: string) => `data-testid VizLegend series ${name}`,\n  },\n  Drawer: {\n    General: {\n      title: (title: string) => `Drawer title ${title}`,\n      expand: 'Drawer expand',\n      contract: 'Drawer contract',\n      close: 'data-testid Drawer close',\n      rcContentWrapper: () => '.rc-drawer-content-wrapper',\n      subtitle: 'data-testid drawer subtitle',\n    },\n  },\n  PanelEditor: {\n    General: {\n      content: 'Panel editor content',\n    },\n    OptionsPane: {\n      content: 'Panel editor option pane content',\n      select: 'Panel editor option pane select',\n      fieldLabel: (type: string) => `${type} field property editor`,\n    },\n    // not sure about the naming *DataPane*\n    DataPane: {\n      content: 'Panel editor data pane content',\n    },\n    applyButton: 'data-testid Apply changes and go back to dashboard',\n    toggleVizPicker: 'data-testid toggle-viz-picker',\n    toggleVizOptions: 'data-testid toggle-viz-options',\n    toggleTableView: 'toggle-table-view',\n\n    // [Geomap] Map controls\n    showZoomField: 'Map controls Show zoom control field property editor',\n    showAttributionField: 'Map controls Show attribution field property editor',\n    showScaleField: 'Map controls Show scale field property editor',\n    showMeasureField: 'Map controls Show measure tools field property editor',\n    showDebugField: 'Map controls Show debug field property editor',\n\n    measureButton: 'show measure tools',\n  },\n  PanelInspector: {\n    Data: {\n      content: 'Panel inspector Data content',\n    },\n    Stats: {\n      content: 'Panel inspector Stats content',\n    },\n    Json: {\n      content: 'Panel inspector Json content',\n    },\n    Query: {\n      content: 'Panel inspector Query content',\n      refreshButton: 'Panel inspector Query refresh button',\n      jsonObjectKeys: () => '.json-formatter-key',\n    },\n  },\n  Tab: {\n    title: (title: string) => `Tab ${title}`,\n    active: () => '[class*=\"-activeTabStyle\"]',\n  },\n  RefreshPicker: {\n    /**\n     * @deprecated use runButtonV2 from Grafana 8.3 instead\n     */\n    runButton: 'RefreshPicker run button',\n    /**\n     * @deprecated use intervalButtonV2 from Grafana 8.3 instead\n     */\n    intervalButton: 'RefreshPicker interval button',\n    runButtonV2: 'data-testid RefreshPicker run button',\n    intervalButtonV2: 'data-testid RefreshPicker interval button',\n  },\n  QueryTab: {\n    content: 'Query editor tab content',\n    queryInspectorButton: 'Query inspector button',\n    queryHistoryButton: 'data-testid query-history-button',\n    addQuery: 'data-testid query-tab-add-query',\n  },\n  QueryHistory: {\n    queryText: 'Query text',\n  },\n  QueryEditorRows: {\n    rows: 'Query editor row',\n  },\n  QueryEditorRow: {\n    actionButton: (title: string) => `data-testid ${title}`,\n    title: (refId: string) => `Query editor row title ${refId}`,\n    container: (refId: string) => `Query editor row ${refId}`,\n  },\n  AlertTab: {\n    content: 'data-testid Alert editor tab content',\n  },\n  Alert: {\n    /**\n     * @deprecated use alertV2 from Grafana 8.3 instead\n     */\n    alert: (severity: string) => `Alert ${severity}`,\n    alertV2: (severity: string) => `data-testid Alert ${severity}`,\n  },\n  TransformTab: {\n    content: 'data-testid Transform editor tab content',\n    newTransform: (name: string) => `data-testid New transform ${name}`,\n    transformationEditor: (name: string) => `data-testid Transformation editor ${name}`,\n    transformationEditorDebugger: (name: string) => `data-testid Transformation editor debugger ${name}`,\n  },\n  Transforms: {\n    card: (name: string) => `data-testid New transform ${name}`,\n    disableTransformationButton: 'data-testid Disable transformation button',\n    Reduce: {\n      modeLabel: 'data-testid Transform mode label',\n      calculationsLabel: 'data-testid Transform calculations label',\n    },\n    SpatialOperations: {\n      actionLabel: 'root Action field property editor',\n      locationLabel: 'root Location Mode field property editor',\n      location: {\n        autoOption: 'Auto location option',\n        coords: {\n          option: 'Coords location option',\n          latitudeFieldLabel: 'root Latitude field field property editor',\n          longitudeFieldLabel: 'root Longitude field field property editor',\n        },\n        geohash: {\n          option: 'Geohash location option',\n          geohashFieldLabel: 'root Geohash field field property editor',\n        },\n        lookup: {\n          option: 'Lookup location option',\n          lookupFieldLabel: 'root Lookup field field property editor',\n          gazetteerFieldLabel: 'root Gazetteer field property editor',\n        },\n      },\n    },\n    searchInput: 'data-testid search transformations',\n    noTransformationsMessage: 'data-testid no transformations message',\n    addTransformationButton: 'data-testid add transformation button',\n    removeAllTransformationsButton: 'data-testid remove all transformations button',\n  },\n  NavBar: {\n    Configuration: {\n      button: 'Configuration',\n    },\n    Toggle: {\n      button: 'data-testid Toggle menu',\n    },\n    Reporting: {\n      button: 'Reporting',\n    },\n  },\n  NavMenu: {\n    Menu: 'data-testid navigation mega-menu',\n    item: 'data-testid Nav menu item',\n  },\n  NavToolbar: {\n    container: 'data-testid Nav toolbar',\n  },\n  PageToolbar: {\n    container: () => '.page-toolbar',\n    item: (tooltip: string) => `${tooltip}`,\n    itemButton: (title: string) => `data-testid ${title}`,\n  },\n  QueryEditorToolbarItem: {\n    button: (title: string) => `QueryEditor toolbar item button ${title}`,\n  },\n  BackButton: {\n    backArrow: 'data-testid Go Back',\n  },\n  OptionsGroup: {\n    group: (title?: string) => (title ? `Options group ${title}` : 'Options group'),\n    toggle: (title?: string) => (title ? `Options group ${title} toggle` : 'Options group toggle'),\n  },\n  PluginVisualization: {\n    item: (title: string) => `Plugin visualization item ${title}`,\n    current: () => '[class*=\"-currentVisualizationItem\"]',\n  },\n  Select: {\n    option: 'Select option',\n    input: () => 'input[id*=\"time-options-input\"]',\n    singleValue: () => 'div[class*=\"-singleValue\"]',\n  },\n  FieldConfigEditor: {\n    content: 'Field config editor content',\n  },\n  OverridesConfigEditor: {\n    content: 'Field overrides editor content',\n  },\n  FolderPicker: {\n    /**\n     * @deprecated use containerV2 from Grafana 8.3 instead\n     */\n    container: 'Folder picker select container',\n    containerV2: 'data-testid Folder picker select container',\n    input: 'data-testid folder-picker-input',\n  },\n  ReadonlyFolderPicker: {\n    container: 'data-testid Readonly folder picker select container',\n  },\n  DataSourcePicker: {\n    container: 'data-testid Data source picker select container',\n    /**\n     * @deprecated use inputV2 instead\n     */\n    input: () => 'input[id=\"data-source-picker\"]',\n    inputV2: 'data-testid Select a data source',\n    dataSourceList: 'data-testid Data source list dropdown',\n    advancedModal: {\n      dataSourceList: 'data-testid Data source list',\n      builtInDataSourceList: 'data-testid Built in data source list',\n    },\n  },\n  TimeZonePicker: {\n    /**\n     * @deprecated use TimeZonePicker.containerV2 from Grafana 8.3 instead\n     */\n    container: 'Time zone picker select container',\n    containerV2: 'data-testid Time zone picker select container',\n  },\n  WeekStartPicker: {\n    /**\n     * @deprecated use WeekStartPicker.containerV2 from Grafana 8.3 instead\n     */\n    container: 'Choose starting day of the week',\n    containerV2: 'data-testid Choose starting day of the week',\n    placeholder: 'Choose starting day of the week',\n  },\n  TraceViewer: {\n    spanBar: 'data-testid SpanBar--wrapper',\n  },\n  QueryField: { container: 'data-testid Query field' },\n  QueryBuilder: {\n    queryPatterns: 'data-testid Query patterns',\n    labelSelect: 'data-testid Select label',\n    valueSelect: 'data-testid Select value',\n    matchOperatorSelect: 'data-testid Select match operator',\n  },\n  ValuePicker: {\n    button: (name: string) => `data-testid Value picker button ${name}`,\n    select: (name: string) => `data-testid Value picker select ${name}`,\n  },\n  Search: {\n    /**\n     * @deprecated use sectionV2 from Grafana 8.3 instead\n     */\n    section: 'Search section',\n    sectionV2: 'data-testid Search section',\n    /**\n     * @deprecated use itemsV2 from Grafana 8.3 instead\n     */\n    items: 'Search items',\n    itemsV2: 'data-testid Search items',\n    cards: 'data-testid Search cards',\n    collapseFolder: (sectionId: string) => `data-testid Collapse folder ${sectionId}`,\n    expandFolder: (sectionId: string) => `data-testid Expand folder ${sectionId}`,\n    dashboardItem: (item: string) => `${Components.Search.dashboardItems} ${item}`,\n    dashboardCard: (item: string) => `data-testid Search card ${item}`,\n    folderHeader: (folderName: string) => `data-testid Folder header ${folderName}`,\n    folderContent: (folderName: string) => `data-testid Folder content ${folderName}`,\n    dashboardItems: 'data-testid Dashboard search item',\n  },\n  DashboardLinks: {\n    container: 'data-testid Dashboard link container',\n    dropDown: 'data-testid Dashboard link dropdown',\n    link: 'data-testid Dashboard link',\n  },\n  LoadingIndicator: {\n    icon: 'data-testid Loading indicator',\n  },\n  CallToActionCard: {\n    /**\n     * @deprecated use buttonV2 from Grafana 8.3 instead\n     */\n    button: (name: string) => `Call to action button ${name}`,\n    buttonV2: (name: string) => `data-testid Call to action button ${name}`,\n  },\n  DataLinksContextMenu: {\n    singleLink: 'data-testid Data link',\n  },\n  CodeEditor: {\n    container: 'data-testid Code editor container',\n  },\n  DashboardImportPage: {\n    textarea: 'data-testid-import-dashboard-textarea',\n    submit: 'data-testid-load-dashboard',\n  },\n  ImportDashboardForm: {\n    name: 'data-testid-import-dashboard-title',\n    submit: 'data-testid-import-dashboard-submit',\n  },\n  PanelAlertTabContent: {\n    content: 'data-testid Unified alert editor tab content',\n  },\n  VisualizationPreview: {\n    card: (name: string) => `data-testid suggestion-${name}`,\n  },\n  ColorSwatch: {\n    name: `data-testid-colorswatch`,\n  },\n  DashboardRow: {\n    title: (title: string) => `data-testid dashboard-row-title-${title}`,\n  },\n  UserProfile: {\n    profileSaveButton: 'data-testid-user-profile-save',\n    preferencesSaveButton: 'data-testid-shared-prefs-save',\n    orgsTable: 'data-testid-user-orgs-table',\n    sessionsTable: 'data-testid-user-sessions-table',\n    extensionPointTabs: 'data-testid-extension-point-tabs',\n    extensionPointTab: (tabId: string) => `data-testid-extension-point-tab-${tabId}`,\n  },\n  FileUpload: {\n    inputField: 'data-testid-file-upload-input-field',\n    fileNameSpan: 'data-testid-file-upload-file-name',\n  },\n  DebugOverlay: {\n    wrapper: 'debug-overlay',\n  },\n  OrgRolePicker: {\n    input: 'Role',\n  },\n  AnalyticsToolbarButton: {\n    button: 'Dashboard insights',\n  },\n  Variables: {\n    variableOption: 'data-testid variable-option',\n  },\n  Annotations: {\n    annotationsTypeInput: 'annotations-type-input',\n    annotationsChoosePanelInput: 'choose-panels-input',\n  },\n  Tooltip: {\n    container: 'data-testid tooltip',\n  },\n};\n","import { E2ESelectors } from '../types';\n\nimport { Components } from './components';\nimport { Pages } from './pages';\n\n/**\n * Exposes selectors in package for easy use in e2e tests and in production code\n *\n * @alpha\n */\nexport const selectors: { pages: E2ESelectors<typeof Pages>; components: E2ESelectors<typeof Components> } = {\n  pages: Pages,\n  components: Components,\n};\n\n/**\n * Exposes Pages, Component selectors and E2ESelectors type in package for easy use in e2e tests and in production code\n *\n * @alpha\n */\nexport { Pages, Components, type E2ESelectors };\n","import { Components } from './components';\n\n/**\n * Selectors grouped/defined in Pages\n *\n * @alpha\n */\nexport const Pages = {\n  Login: {\n    url: '/login',\n    username: 'data-testid Username input field',\n    password: 'data-testid Password input field',\n    submit: 'data-testid Login button',\n    skip: 'data-testid Skip change password button',\n  },\n  Home: {\n    url: '/',\n  },\n  DataSource: {\n    name: 'data-testid Data source settings page name input field',\n    delete: 'Data source settings page Delete button',\n    readOnly: 'data-testid Data source settings page read only message',\n    saveAndTest: 'data-testid Data source settings page Save and Test button',\n    alert: 'data-testid Data source settings page Alert',\n  },\n  DataSources: {\n    url: '/datasources',\n    dataSources: (dataSourceName: string) => `Data source list item ${dataSourceName}`,\n  },\n  EditDataSource: {\n    url: (dataSourceUid: string) => `/datasources/edit/${dataSourceUid}`,\n    settings: 'Datasource settings page basic settings',\n  },\n  AddDataSource: {\n    url: '/datasources/new',\n    /** @deprecated Use dataSourcePluginsV2 */\n    dataSourcePlugins: (pluginName: string) => `Data source plugin item ${pluginName}`,\n    dataSourcePluginsV2: (pluginName: string) => `Add new data source ${pluginName}`,\n  },\n  ConfirmModal: {\n    delete: 'data-testid Confirm Modal Danger Button',\n  },\n  AddDashboard: {\n    url: '/dashboard/new',\n    itemButton: (title: string) => `data-testid ${title}`,\n    addNewPanel: 'Add new panel',\n    addNewRow: 'Add new row',\n    addNewPanelLibrary: 'Add new panel from panel library',\n  },\n  Dashboard: {\n    url: (uid: string) => `/d/${uid}`,\n    DashNav: {\n      /**\n       * @deprecated use navV2 from Grafana 8.3 instead\n       */\n      nav: 'Dashboard navigation',\n      navV2: 'data-testid Dashboard navigation',\n      publicDashboardTag: 'data-testid public dashboard tag',\n      shareButton: 'data-testid share-button',\n    },\n    SubMenu: {\n      submenu: 'Dashboard submenu',\n      submenuItem: 'data-testid template variable',\n      submenuItemLabels: (item: string) => `data-testid Dashboard template variables submenu Label ${item}`,\n      submenuItemValueDropDownValueLinkTexts: (item: string) =>\n        `data-testid Dashboard template variables Variable Value DropDown value link text ${item}`,\n      submenuItemValueDropDownDropDown: 'Variable options',\n      submenuItemValueDropDownOptionTexts: (item: string) =>\n        `data-testid Dashboard template variables Variable Value DropDown option text ${item}`,\n      Annotations: {\n        annotationsWrapper: 'data-testid annotation-wrapper',\n        annotationLabel: (label: string) => `data-testid Dashboard annotations submenu Label ${label}`,\n        annotationToggle: (label: string) => `data-testid Dashboard annotations submenu Toggle ${label}`,\n      },\n    },\n    Settings: {\n      Actions: {\n        close: 'data-testid dashboard-settings-close',\n      },\n      General: {\n        deleteDashBoard: 'Dashboard settings page delete dashboard button',\n        sectionItems: (item: string) => `Dashboard settings section item ${item}`,\n        saveDashBoard: 'Dashboard settings aside actions Save button',\n        saveAsDashBoard: 'Dashboard settings aside actions Save As button',\n        /**\n         * @deprecated use components.TimeZonePicker.containerV2 from Grafana 8.3 instead\n         */\n        timezone: 'Time zone picker select container',\n        title: 'Tab General',\n      },\n      Annotations: {\n        List: {\n          /**\n           * @deprecated use addAnnotationCTAV2 from Grafana 8.3 instead\n           */\n          addAnnotationCTA: Components.CallToActionCard.button('Add annotation query'),\n          addAnnotationCTAV2: Components.CallToActionCard.buttonV2('Add annotation query'),\n          annotations: 'data-testid list-annotations',\n        },\n        Settings: {\n          name: 'Annotations settings name input',\n        },\n        NewAnnotation: {\n          panelFilterSelect: 'data-testid annotations-panel-filter',\n          showInLabel: 'show-in-label',\n          previewInDashboard: 'data-testid annotations-preview',\n          delete: 'data-testid annotations-delete',\n          apply: 'data-testid annotations-apply',\n          enable: 'data-testid annotation-enable',\n          hide: 'data-testid annotation-hide',\n        },\n      },\n      Variables: {\n        List: {\n          /**\n           * @deprecated use addVariableCTAV2 from Grafana 8.3 instead\n           */\n          addVariableCTA: Components.CallToActionCard.button('Add variable'),\n          addVariableCTAV2: Components.CallToActionCard.buttonV2('Add variable'),\n          newButton: 'Variable editor New variable button',\n          table: 'Variable editor Table',\n          tableRowNameFields: (variableName: string) => `Variable editor Table Name field ${variableName}`,\n          tableRowDefinitionFields: (variableName: string) => `Variable editor Table Definition field ${variableName}`,\n          tableRowArrowUpButtons: (variableName: string) => `Variable editor Table ArrowUp button ${variableName}`,\n          tableRowArrowDownButtons: (variableName: string) => `Variable editor Table ArrowDown button ${variableName}`,\n          tableRowDuplicateButtons: (variableName: string) => `Variable editor Table Duplicate button ${variableName}`,\n          tableRowRemoveButtons: (variableName: string) => `Variable editor Table Remove button ${variableName}`,\n        },\n        Edit: {\n          General: {\n            headerLink: 'Variable editor Header link',\n            modeLabelNew: 'Variable editor Header mode New',\n            /**\n             * @deprecated\n             */\n            modeLabelEdit: 'Variable editor Header mode Edit',\n            generalNameInput: 'Variable editor Form Name field',\n            generalNameInputV2: 'data-testid Variable editor Form Name field',\n            generalTypeSelect: 'Variable editor Form Type select',\n            generalTypeSelectV2: 'data-testid Variable editor Form Type select',\n            generalLabelInput: 'Variable editor Form Label field',\n            generalLabelInputV2: 'data-testid Variable editor Form Label field',\n            generalHideSelect: 'Variable editor Form Hide select',\n            generalHideSelectV2: 'data-testid Variable editor Form Hide select',\n            selectionOptionsMultiSwitch: 'data-testid Variable editor Form Multi switch',\n            selectionOptionsIncludeAllSwitch: 'data-testid Variable editor Form IncludeAll switch',\n            selectionOptionsCustomAllInput: 'data-testid Variable editor Form IncludeAll field',\n            previewOfValuesOption: 'data-testid Variable editor Preview of Values option',\n            submitButton: 'data-testid Variable editor Run Query button',\n            applyButton: 'data-testid Variable editor Apply button',\n          },\n          QueryVariable: {\n            queryOptionsDataSourceSelect: Components.DataSourcePicker.inputV2,\n            queryOptionsRefreshSelect: 'Variable editor Form Query Refresh select',\n            queryOptionsRefreshSelectV2: 'data-testid Variable editor Form Query Refresh select',\n            queryOptionsRegExInput: 'Variable editor Form Query RegEx field',\n            queryOptionsRegExInputV2: 'data-testid Variable editor Form Query RegEx field',\n            queryOptionsSortSelect: 'Variable editor Form Query Sort select',\n            queryOptionsSortSelectV2: 'data-testid Variable editor Form Query Sort select',\n            queryOptionsQueryInput: 'data-testid Variable editor Form Default Variable Query Editor textarea',\n            valueGroupsTagsEnabledSwitch: 'Variable editor Form Query UseTags switch',\n            valueGroupsTagsTagsQueryInput: 'Variable editor Form Query TagsQuery field',\n            valueGroupsTagsTagsValuesQueryInput: 'Variable editor Form Query TagsValuesQuery field',\n          },\n          ConstantVariable: {\n            constantOptionsQueryInput: 'Variable editor Form Constant Query field',\n            constantOptionsQueryInputV2: 'data-testid Variable editor Form Constant Query field',\n          },\n          DatasourceVariable: {\n            datasourceSelect: 'data-testid datasource variable datasource type',\n          },\n          TextBoxVariable: {\n            textBoxOptionsQueryInput: 'Variable editor Form TextBox Query field',\n            textBoxOptionsQueryInputV2: 'data-testid Variable editor Form TextBox Query field',\n          },\n          CustomVariable: {\n            customValueInput: 'data-testid custom-variable-input',\n          },\n          IntervalVariable: {\n            intervalsValueInput: 'data-testid interval variable intervals input',\n            autoEnabledCheckbox: 'data-testid interval variable auto value checkbox',\n            stepCountIntervalSelect: 'data-testid interval variable step count input',\n            minIntervalInput: 'data-testid interval variable mininum interval input',\n          },\n          GroupByVariable: {\n            dataSourceSelect: Components.DataSourcePicker.inputV2,\n            infoText: 'data-testid group by variable info text',\n            modeToggle: 'data-testid group by variable mode toggle',\n          },\n          AdHocFiltersVariable: {\n            datasourceSelect: Components.DataSourcePicker.inputV2,\n            infoText: 'data-testid ad-hoc filters variable info text',\n          },\n        },\n      },\n    },\n    Annotations: {\n      marker: 'data-testid annotation-marker',\n    },\n    Rows: {\n      Repeated: {\n        ConfigSection: {\n          warningMessage: 'data-testid Repeated rows warning message',\n        },\n      },\n    },\n  },\n  Dashboards: {\n    url: '/dashboards',\n    /**\n     * @deprecated use components.Search.dashboardItem from Grafana 8.3 instead\n     */\n    dashboards: (title: string) => `Dashboard search item ${title}`,\n  },\n  SaveDashboardAsModal: {\n    newName: 'Save dashboard title field',\n    save: 'Save dashboard button',\n  },\n  SaveDashboardModal: {\n    save: 'Dashboard settings Save Dashboard Modal Save button',\n    saveVariables: 'Dashboard settings Save Dashboard Modal Save variables checkbox',\n    saveTimerange: 'Dashboard settings Save Dashboard Modal Save timerange checkbox',\n  },\n  SharePanelModal: {\n    linkToRenderedImage: 'Link to rendered image',\n  },\n  ShareDashboardModal: {\n    PublicDashboard: {\n      Tab: 'Tab Public dashboard',\n      WillBePublicCheckbox: 'data-testid public dashboard will be public checkbox',\n      LimitedDSCheckbox: 'data-testid public dashboard limited datasources checkbox',\n      CostIncreaseCheckbox: 'data-testid public dashboard cost may increase checkbox',\n      PauseSwitch: 'data-testid public dashboard pause switch',\n      EnableAnnotationsSwitch: 'data-testid public dashboard on off switch for annotations',\n      CreateButton: 'data-testid public dashboard create button',\n      DeleteButton: 'data-testid public dashboard delete button',\n      CopyUrlInput: 'data-testid public dashboard copy url input',\n      CopyUrlButton: 'data-testid public dashboard copy url button',\n      SettingsDropdown: 'data-testid public dashboard settings dropdown',\n      TemplateVariablesWarningAlert: 'data-testid public dashboard disabled template variables alert',\n      UnsupportedDataSourcesWarningAlert: 'data-testid public dashboard unsupported data sources alert',\n      NoUpsertPermissionsWarningAlert: 'data-testid public dashboard no upsert permissions alert',\n      EnableTimeRangeSwitch: 'data-testid public dashboard on off switch for time range',\n      EmailSharingConfiguration: {\n        Container: 'data-testid email sharing config container',\n        ShareType: 'data-testid public dashboard share type',\n        EmailSharingInput: 'data-testid public dashboard email sharing input',\n        EmailSharingInviteButton: 'data-testid public dashboard email sharing invite button',\n        EmailSharingList: 'data-testid public dashboard email sharing list',\n        DeleteEmail: 'data-testid public dashboard delete email button',\n        ReshareLink: 'data-testid public dashboard reshare link button',\n      },\n    },\n  },\n  PublicDashboard: {\n    page: 'public-dashboard-page',\n    NotAvailable: {\n      container: 'public-dashboard-not-available',\n      title: 'public-dashboard-title',\n      pausedDescription: 'public-dashboard-paused-description',\n    },\n  },\n  RequestViewAccess: {\n    form: 'request-view-access-form',\n    recipientInput: 'request-view-access-recipient-input',\n    submitButton: 'request-view-access-submit-button',\n  },\n  PublicDashboardConfirmAccess: {\n    submitButton: 'data-testid confirm-access-submit-button',\n  },\n  Explore: {\n    url: '/explore',\n    General: {\n      container: 'data-testid Explore',\n      graph: 'Explore Graph',\n      table: 'Explore Table',\n      scrollView: 'data-testid explorer scroll view',\n    },\n  },\n  SoloPanel: {\n    url: (page: string) => `/d-solo/${page}`,\n  },\n  PluginsList: {\n    page: 'Plugins list page',\n    list: 'Plugins list',\n    listItem: 'Plugins list item',\n    signatureErrorNotice: 'data-testid Unsigned plugins notice',\n  },\n  PluginPage: {\n    page: 'Plugin page',\n    signatureInfo: 'data-testid Plugin signature info',\n    disabledInfo: 'data-testid Plugin disabled info',\n  },\n  PlaylistForm: {\n    name: 'Playlist name',\n    interval: 'Playlist interval',\n    itemDelete: 'data-testid playlist-form-delete-item',\n  },\n  BrowseDashboards: {\n    table: {\n      body: 'data-testid browse-dashboards-table',\n      row: (name: string) => `data-testid browse dashboards row ${name}`,\n      checkbox: (uid: string) => `data-testid ${uid} checkbox`,\n    },\n    NewFolderForm: {\n      form: 'data-testid new folder form',\n      nameInput: 'data-testid new-folder-name-input',\n      createButton: 'data-testid new-folder-create-button',\n    },\n  },\n  Search: {\n    url: '/?search=openn',\n    FolderView: {\n      url: '/?search=open&layout=folders',\n    },\n  },\n  PublicDashboards: {\n    ListItem: {\n      linkButton: 'public-dashboard-link-button',\n      configButton: 'public-dashboard-configuration-button',\n      trashcanButton: 'public-dashboard-remove-button',\n      pauseSwitch: 'data-testid public dashboard pause switch',\n    },\n  },\n  UserListPage: {\n    tabs: {\n      allUsers: 'data-testid all-users-tab',\n      orgUsers: 'data-testid org-users-tab',\n      anonUserDevices: 'data-testid anon-user-devices-tab',\n      publicDashboardsUsers: 'data-testid public-dashboards-users-tab',\n      users: 'data-testid users-tab',\n    },\n    org: {\n      url: '/org/users',\n    },\n    admin: {\n      url: '/admin/users',\n    },\n    publicDashboards: {\n      container: 'data-testid public-dashboards-users-list',\n    },\n    UserListAdminPage: {\n      container: 'data-testid user-list-admin-page',\n    },\n    UsersListPage: {\n      container: 'data-testid users-list-page',\n    },\n    UserAnonListPage: {\n      container: 'data-testid user-anon-list-page',\n    },\n    UsersListPublicDashboardsPage: {\n      container: 'data-testid users-list-public-dashboards-page',\n      DashboardsListModal: {\n        listItem: (uid: string) => `data-testid dashboards-list-item-${uid}`,\n      },\n    },\n  },\n  ProfilePage: {\n    url: '/profile',\n  },\n};\n","import { monacoTypes } from '@grafana/ui';\n\n// this thing here is a workaround in a way.\n// what we want to achieve, is that when the autocomplete-window\n// opens, the \"second, extra popup\" with the extra help,\n// also opens automatically.\n// but there is no API to achieve it.\n// the way to do it is to implement the `storageService`\n// interface, and provide our custom implementation,\n// which will default to `true` for the correct string-key.\n// unfortunately, while the typescript-interface exists,\n// it is not exported from monaco-editor,\n// so we cannot rely on typescript to make sure\n// we do it right. all we can do is to manually\n// lookup the interface, and make sure we code our code right.\n// our code is a \"best effort\" approach,\n// i am not 100% how the `scope` and `target` things work,\n// but so far it seems to work ok.\n// i would use an another approach, if there was one available.\n\nfunction makeStorageService() {\n  // we need to return an object that fulfills this interface:\n  // https://github.com/microsoft/vscode/blob/ff1e16eebb93af79fd6d7af1356c4003a120c563/src/vs/platform/storage/common/storage.ts#L37\n  // unfortunately it is not export from monaco-editor\n\n  const strings = new Map<string, string>();\n\n  // we want this to be true by default\n  strings.set('expandSuggestionDocs', true.toString());\n\n  return {\n    // we do not implement the on* handlers\n    onDidChangeValue: (data: unknown): void => undefined,\n    onDidChangeTarget: (data: unknown): void => undefined,\n    onWillSaveState: (data: unknown): void => undefined,\n\n    get: (key: string, scope: unknown, fallbackValue?: string): string | undefined => {\n      return strings.get(key) ?? fallbackValue;\n    },\n\n    getBoolean: (key: string, scope: unknown, fallbackValue?: boolean): boolean | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        // the interface docs say the value will be converted\n        // to a boolean but do not specify how, so we improvise\n        return val === 'true';\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    getNumber: (key: string, scope: unknown, fallbackValue?: number): number | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        return parseInt(val, 10);\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    store: (\n      key: string,\n      value: string | boolean | number | undefined | null,\n      scope: unknown,\n      target: unknown\n    ): void => {\n      // the interface docs say if the value is nullish, it should act as delete\n      if (value === null || value === undefined) {\n        strings.delete(key);\n      } else {\n        strings.set(key, value.toString());\n      }\n    },\n\n    remove: (key: string, scope: unknown): void => {\n      strings.delete(key);\n    },\n\n    keys: (scope: unknown, target: unknown): string[] => {\n      return Array.from(strings.keys());\n    },\n\n    logStorage: (): void => {\n      console.log('logStorage: not implemented');\n    },\n\n    migrate: (): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n\n    isNew: (scope: unknown): boolean => {\n      // we create a new storage for every session, we do not persist it,\n      // so we return `true`.\n      return true;\n    },\n\n    flush: (reason?: unknown): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n  };\n}\n\nlet overrideServices: monacoTypes.editor.IEditorOverrideServices = {\n  storageService: makeStorageService(),\n};\n\nexport function getOverrideServices(): monacoTypes.editor.IEditorOverrideServices {\n  // One instance of this for every query editor\n  return overrideServices;\n}\n","// This helper class is used to make typescript warn you when you miss a case-block in a switch statement.\n// For example:\n//\n// const x:'A'|'B'|'C' = 'A';\n//\n// switch(x) {\n//   case 'A':\n//     // something\n//   case 'B':\n//     // something\n//   default:\n//     throw new NeverCaseError(x);\n// }\n//\n//\n// TypeScript detect the missing case and display an error.\n\nexport class NeverCaseError extends Error {\n  constructor(value: never) {\n    super(`Unexpected case in switch statement: ${JSON.stringify(value)}`);\n  }\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CompletionDataProvider } from './CompletionDataProvider';\nimport { NeverCaseError } from './NeverCaseError';\nimport { Situation, getSituation } from './situation';\n\ntype CompletionType =\n  | 'HISTORY'\n  | 'FUNCTION'\n  | 'DURATION'\n  | 'LABEL_NAME'\n  | 'LABEL_VALUE'\n  | 'PATTERN'\n  | 'PARSER'\n  | 'LINE_FILTER'\n  | 'PIPE_OPERATION';\n\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string;\n  triggerOnInsert?: boolean;\n  isSnippet?: boolean;\n};\n\nconst DURATION_COMPLETIONS: Completion[] = ['$__auto', '1m', '5m', '10m', '30m', '1h', '1d'].map((text) => ({\n  type: 'DURATION',\n  label: text,\n  insertText: text,\n}));\nconst getCompletions = async (situation: Situation, dataProvider: CompletionDataProvider) => {\n  return DURATION_COMPLETIONS;\n};\n\n// from: monacoTypes.languages.CompletionItemInsertTextRule.InsertAsSnippet\nconst INSERT_AS_SNIPPET_ENUM_VALUE = 4;\n\nexport function getSuggestOptions(): monacoTypes.editor.ISuggestOptions {\n  return {\n    // monaco-editor sometimes provides suggestions automatically, i am not\n    // sure based on what, seems to be by analyzing the words already\n    // written.\n    // to try it out:\n    // - enter `go_goroutines{job~`\n    // - have the cursor at the end of the string\n    // - press ctrl-enter\n    // - you will get two suggestions\n    // those were not provided by grafana, they are offered automatically.\n    // i want to remove those. the only way i found is:\n    // - every suggestion-item has a `kind` attribute,\n    //   that controls the icon to the left of the suggestion.\n    // - items auto-generated by monaco have `kind` set to `text`.\n    // - we make sure grafana-provided suggestions do not have `kind` set to `text`.\n    // - and then we tell monaco not to show suggestions of kind `text`\n    showWords: false,\n  };\n}\n\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'DURATION':\n      return monaco.languages.CompletionItemKind.Unit;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Variable;\n    case 'HISTORY':\n      return monaco.languages.CompletionItemKind.Snippet;\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'PATTERN':\n      return monaco.languages.CompletionItemKind.Constructor;\n    case 'PARSER':\n      return monaco.languages.CompletionItemKind.Class;\n    case 'LINE_FILTER':\n      return monaco.languages.CompletionItemKind.TypeParameter;\n    case 'PIPE_OPERATION':\n      return monaco.languages.CompletionItemKind.Interface;\n    default:\n      throw new NeverCaseError(type as never);\n  }\n}\n\nexport function getCompletionProvider(\n  monaco: Monaco,\n  dataProvider: CompletionDataProvider\n): monacoTypes.languages.CompletionItemProvider {\n  const provideCompletionItems = (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> => {\n    const word = model.getWordAtPosition(position);\n    const wordUntil = model.getWordUntilPosition(position);\n\n    // documentation says `position` will be \"adjusted\" in `getOffsetAt`\n    // i don't know what that means, to be sure i clone it\n    const positionClone = {\n      column: position.column,\n      lineNumber: position.lineNumber,\n    };\n    const offset = model.getOffsetAt(positionClone);\n    const situation = getSituation(model.getValue(), offset);\n    const range = calculateRange(situation, word, wordUntil, monaco, position);\n    const completionsPromise = situation != null ? getCompletions(situation, dataProvider) : Promise.resolve([]);\n    return completionsPromise.then((items) => {\n      // monaco by default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, monaco),\n        label: item.label,\n        insertText: item.insertText,\n        insertTextRules: item.isSnippet ? INSERT_AS_SNIPPET_ENUM_VALUE : undefined,\n        detail: item.detail,\n        documentation: item.documentation,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range: range,\n        command: item.triggerOnInsert\n          ? {\n              id: 'editor.action.triggerSuggest',\n              title: '',\n            }\n          : undefined,\n      }));\n      return { suggestions };\n    });\n  };\n\n  return {\n    triggerCharacters: ['{', ',', '[', '(', '=', '~', ' ', '\"', '|'],\n    provideCompletionItems,\n  };\n}\n\nexport const calculateRange = (\n  situation: Situation | null,\n  word: monacoTypes.editor.IWordAtPosition | null,\n  wordUntil: monacoTypes.editor.IWordAtPosition,\n  monaco: Monaco,\n  position: monacoTypes.Position\n): monacoTypes.Range => {\n  if (\n    situation &&\n    situation?.type === 'IN_LABEL_SELECTOR_WITH_LABEL_NAME' &&\n    'betweenQuotes' in situation &&\n    situation.betweenQuotes\n  ) {\n    // Word until won't have second quote if they are between quotes\n    const indexOfFirstQuote = wordUntil?.word?.indexOf('\"') ?? 0;\n\n    const indexOfLastQuote = word?.word?.lastIndexOf('\"') ?? 0;\n\n    const indexOfEquals = word?.word.indexOf('=');\n    const indexOfLastEquals = word?.word.lastIndexOf('=');\n\n    // Just one equals \"=\" the cursor is somewhere within a label value\n    // e.g. value=\"labe^l-value\" or value=\"^label-value\" etc\n    // We want the word to include everything within the quotes, so the result from autocomplete overwrites the existing label value\n    if (\n      indexOfLastEquals === indexOfEquals &&\n      indexOfFirstQuote !== -1 &&\n      indexOfLastQuote !== -1 &&\n      indexOfLastEquals !== -1\n    ) {\n      return word != null\n        ? monaco.Range.lift({\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: wordUntil.startColumn + indexOfFirstQuote + 1,\n            endColumn: wordUntil.startColumn + indexOfLastQuote,\n          })\n        : monaco.Range.fromPositions(position);\n    }\n  }\n\n  if (situation && situation.type === 'IN_LABEL_SELECTOR_WITH_LABEL_NAME') {\n    // Otherwise we want the range to be calculated as the cursor position, as we want to insert the autocomplete, instead of overwriting existing text\n    // The cursor position is the length of the wordUntil\n    return word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: wordUntil.endColumn,\n          endColumn: wordUntil.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n  }\n\n  // And for all other non-label cases, we want to use the word start and end column\n  return word != null\n    ? monaco.Range.lift({\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      })\n    : monaco.Range.fromPositions(position);\n};\n","import { chain } from 'lodash';\n\nimport { HistoryItem } from '@grafana/data';\n\nimport { LokiQuery, ParserAndLabelKeysResult, LanguageProvider } from '../../types';\n\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nimport { Label } from './situation';\n\ninterface HistoryRef {\n  current: Array<HistoryItem<LokiQuery>>;\n}\n\nexport class CompletionDataProvider {\n  constructor(\n    private languageProvider: LanguageProvider,\n    private historyRef: HistoryRef = { current: [] }\n  ) {\n    this.queryToLabelKeysCache = new Map();\n  }\n  private queryToLabelKeysCache: Map<string, ParserAndLabelKeysResult>;\n\n  private buildSelector(labels: Label[]): string {\n    const allLabelTexts = labels.map(\n      (label) => `${label.name}${label.op}\"${escapeLabelValueInExactSelector(label.value)}\"`\n    );\n\n    return `{${allLabelTexts.join(',')}}`;\n  }\n\n  getHistory() {\n    return chain(this.historyRef.current)\n      .map((history: HistoryItem<LokiQuery>) => history.query.expr)\n      .filter()\n      .uniq()\n      .value();\n  }\n\n  async getLabelNames(otherLabels: Label[] = []) {\n    if (otherLabels.length === 0) {\n      // if there is no filtering, we have to use a special endpoint\n      return this.languageProvider.getLabelKeys();\n    }\n    const data = await this.getSeriesLabels(otherLabels);\n    const possibleLabelNames = Object.keys(data); // all names from datasource\n    const usedLabelNames = new Set(otherLabels.map((l) => l.name)); // names used in the query\n    return possibleLabelNames.filter((label) => !usedLabelNames.has(label));\n  }\n\n  async getLabelValues(labelName: string, otherLabels: Label[]) {\n    if (otherLabels.length === 0) {\n      // if there is no filtering, we have to use a special endpoint\n      return await this.languageProvider.fetchLabelValues(labelName);\n    }\n\n    const data = await this.getSeriesLabels(otherLabels);\n    return data[labelName] ?? [];\n  }\n\n  /**\n   * Runs a Loki query to extract label keys from the result.\n   * The result is cached for the query string.\n   *\n   * Since various \"situations\" in the monaco code editor trigger this function, it is prone to being called multiple times for the same query\n   * Here is a lightweight and simple cache to avoid calling the backend multiple times for the same query.\n   *\n   * @param logQuery\n   */\n  async getParserAndLabelKeys(logQuery: string): Promise<ParserAndLabelKeysResult> {\n    const EXTRACTED_LABEL_KEYS_MAX_CACHE_SIZE = 2;\n    const cachedLabelKeys = this.queryToLabelKeysCache.has(logQuery) ? this.queryToLabelKeysCache.get(logQuery) : null;\n    if (cachedLabelKeys) {\n      // cache hit! Serve stale result from cache\n      return cachedLabelKeys;\n    } else {\n      // If cache is larger than max size, delete the first (oldest) index\n      if (this.queryToLabelKeysCache.size >= EXTRACTED_LABEL_KEYS_MAX_CACHE_SIZE) {\n        // Make room in the cache for the fresh result by deleting the \"first\" index\n        const keys = this.queryToLabelKeysCache.keys();\n        const firstKey = keys.next().value;\n        this.queryToLabelKeysCache.delete(firstKey);\n      }\n      // Fetch a fresh result from the backend\n      const labelKeys = await this.languageProvider.getParserAndLabelKeys(logQuery);\n      // Add the result to the cache\n      this.queryToLabelKeysCache.set(logQuery, labelKeys);\n      return labelKeys;\n    }\n  }\n\n  async getSeriesLabels(labels: Label[]) {\n    return await this.languageProvider.fetchSeriesLabels(this.buildSelector(labels)).then((data: any) => data ?? {});\n  }\n}\n","import { SyntaxNode } from '@lezer/common';\nimport { LRParser } from '@lezer/lr';\n\n// import { ErrorId } from 'app/plugins/datasource/prometheus/querybuilder/shared/parsingUtils';\nconst ErrorId = 0;\n\ninterface ParserErrorBoundary {\n  startLineNumber: number;\n  startColumn: number;\n  endLineNumber: number;\n  endColumn: number;\n  error: string;\n}\n\ninterface ParseError {\n  text: string;\n  node: SyntaxNode;\n}\n\n/**\n * Conceived to work in combination with the MonacoQueryField component.\n * Given an original query, and it's interpolated version, it will return an array of ParserErrorBoundary\n * objects containing nodes which are actual errors. The interpolated version (even with placeholder variables)\n * is required because variables look like errors for Lezer.\n * @internal\n */\nexport function validateQuery(\n  query: string,\n  interpolatedQuery: string,\n  queryLines: string[],\n  parser: LRParser\n): ParserErrorBoundary[] | false {\n  if (!query) {\n    return false;\n  }\n\n  /**\n   * To provide support to variable interpolation in query validation, we run the parser in the interpolated\n   * query. If there are errors there, we trace them back to the original unparsed query, so we can more\n   * accurately highlight the error in the query, since it's likely that the variable name and variable value\n   * have different lengths. With this, we also exclude irrelevant parser errors that are produced by\n   * lezer not understanding $variables and $__variables, which usually generate 2 or 3 error SyntaxNode.\n   */\n  const interpolatedErrors: ParseError[] = parseQuery(interpolatedQuery, parser);\n  if (!interpolatedErrors.length) {\n    return false;\n  }\n\n  let parseErrors: ParseError[] = interpolatedErrors;\n  if (query !== interpolatedQuery) {\n    const queryErrors: ParseError[] = parseQuery(query, parser);\n    parseErrors = interpolatedErrors.flatMap(\n      (interpolatedError) =>\n        queryErrors.filter((queryError) => interpolatedError.text === queryError.text) || interpolatedError\n    );\n  }\n\n  return parseErrors.map((parseError) => findErrorBoundary(query, queryLines, parseError)).filter(isErrorBoundary);\n}\n\nfunction parseQuery(query: string, parser: LRParser) {\n  const parseErrors: ParseError[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (nodeRef): false | void => {\n      if (nodeRef.type.id === ErrorId) {\n        const node = nodeRef.node;\n        parseErrors.push({\n          node: node,\n          text: query.substring(node.from, node.to),\n        });\n      }\n    },\n  });\n  return parseErrors;\n}\n\nfunction findErrorBoundary(query: string, queryLines: string[], parseError: ParseError): ParserErrorBoundary | null {\n  if (queryLines.length === 1) {\n    const isEmptyString = parseError.node.from === parseError.node.to;\n    const errorNode = isEmptyString && parseError.node.parent ? parseError.node.parent : parseError.node;\n    const error = isEmptyString ? query.substring(errorNode.from, errorNode.to) : parseError.text;\n    return {\n      startLineNumber: 1,\n      startColumn: errorNode.from + 1,\n      endLineNumber: 1,\n      endColumn: errorNode.to + 1,\n      error,\n    };\n  }\n\n  let startPos = 0,\n    endPos = 0;\n  for (let line = 0; line < queryLines.length; line++) {\n    endPos = startPos + queryLines[line].length;\n\n    if (parseError.node.from > endPos) {\n      startPos += queryLines[line].length + 1;\n      continue;\n    }\n\n    return {\n      startLineNumber: line + 1,\n      startColumn: parseError.node.from - startPos + 1,\n      endLineNumber: line + 1,\n      endColumn: parseError.node.to - startPos + 1,\n      error: parseError.text,\n    };\n  }\n\n  return null;\n}\n\nfunction isErrorBoundary(boundary: ParserErrorBoundary | null): boundary is ParserErrorBoundary {\n  return boundary !== null;\n}\n\nexport const placeHolderScopedVars = {\n  __interval: { text: '1s', value: '1s' },\n  __rate_interval: { text: '1s', value: '1s' },\n  __auto: { text: '1s', value: '1s' },\n  __interval_ms: { text: '1000', value: 1000 },\n  __range_ms: { text: '1000', value: 1000 },\n  __range_s: { text: '1', value: 1 },\n  __range: { text: '1s', value: '1s' },\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { useRef, useEffect } from 'react';\nimport { useLatest } from 'react-use';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { parser } from '@grafana/lezer-logql';\nimport { languageConfiguration, monarchlanguage } from '@grafana/monaco-logql';\nimport { useTheme2, ReactMonacoEditor, Monaco, monacoTypes, MonacoEditor } from '@grafana/ui';\n\nimport { Props } from './MonacoQueryFieldProps';\nimport { getOverrideServices } from './getOverrideServices';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\nimport { CompletionDataProvider } from './monaco-completion-provider/CompletionDataProvider';\nimport { placeHolderScopedVars, validateQuery } from './monaco-completion-provider/validation';\n\nconst options: monacoTypes.editor.IStandaloneEditorConstructionOptions = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8, // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5,\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8, // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0,\n    alwaysConsumeMouseWheel: false,\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on',\n};\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\nconst LANG_ID = 'logql';\n\n// we must only run the lang-setup code once\nlet LANGUAGE_SETUP_STARTED = false;\n\nexport const defaultWordPattern = /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g;\n\nfunction ensureLogQL(monaco: Monaco) {\n  if (LANGUAGE_SETUP_STARTED === false) {\n    LANGUAGE_SETUP_STARTED = true;\n    monaco.languages.register({ id: LANG_ID });\n\n    monaco.languages.setMonarchTokensProvider(LANG_ID, monarchlanguage);\n    monaco.languages.setLanguageConfiguration(LANG_ID, {\n      ...languageConfiguration,\n      wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()+\\[{\\]}\\\\|;:',.<>\\/?\\s]+)/g,\n      // Default:  /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g\n      // Removed `\"`, `=`, and `-`, from the exclusion list, so now the completion provider can decide to overwrite any matching words, or just insert text at the cursor\n    });\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string) => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.radius.default};\n      border: 1px solid ${theme.components.input.borderColor};\n      width: 100%;\n      .monaco-editor .suggest-widget {\n        min-width: 50%;\n      }\n    `,\n    placeholder: css`\n      ::after {\n        content: '${placeholder}';\n        font-family: ${theme.typography.fontFamilyMonospace};\n        opacity: 0.3;\n      }\n    `,\n  };\n};\n\nconst MonacoQueryField = ({ history, onBlur, onRunQuery, initialValue, datasource, placeholder, onChange }: Props) => {\n  const id = uuidv4();\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const langProviderRef = useLatest(datasource.languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n\n  const autocompleteCleanupCallback = useRef<(() => void) | null>(null);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteCleanupCallback.current?.();\n    };\n  }, []);\n\n  const setPlaceholder = (monaco: Monaco, editor: MonacoEditor) => {\n    const placeholderDecorators = [\n      {\n        range: new monaco.Range(1, 1, 1, 1),\n        options: {\n          className: styles.placeholder,\n          isWholeLine: true,\n        },\n      },\n    ];\n\n    let decorators: string[] = [];\n\n    const checkDecorators: () => void = () => {\n      const model = editor.getModel();\n\n      if (!model) {\n        return;\n      }\n\n      const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n      decorators = model.deltaDecorations(decorators, newDecorators);\n    };\n\n    checkDecorators();\n    editor.onDidChangeModelContent(checkDecorators);\n  };\n\n  const onTypeDebounced = debounce(async (query: string) => {\n    onChange(query);\n  }, 1000);\n\n  return (\n    <div\n      aria-label={selectors.components.QueryField.container}\n      className={styles.container}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <ReactMonacoEditor\n        overrideServices={overrideServicesRef.current}\n        options={options}\n        language={LANG_ID}\n        value={initialValue}\n        beforeMount={(monaco) => {\n          ensureLogQL(monaco);\n        }}\n        onMount={(editor, monaco) => {\n          // Monaco has a bug where it runs actions on all instances (https://github.com/microsoft/monaco-editor/issues/2947), so we ensure actions are executed on instance-level with this ContextKey.\n          const isEditorFocused = editor.createContextKey<boolean>('isEditorFocused' + id, false);\n          // we setup on-blur\n          editor.onDidBlurEditorWidget(() => {\n            isEditorFocused.set(false);\n            onBlurRef.current(editor.getValue());\n          });\n          editor.onDidChangeModelContent((e) => {\n            const model = editor.getModel();\n            if (!model) {\n              return;\n            }\n            const query = model.getValue();\n            const errors =\n              validateQuery(\n                query,\n                datasource.interpolateString(query, placeHolderScopedVars),\n                model.getLinesContent(),\n                parser\n              ) || [];\n\n            const markers = errors.map(({ error, ...boundary }: any) => ({\n              message: `${\n                error ? `Error parsing \"${error}\"` : 'Parse error'\n              }. The query appears to be incorrect and could fail to be executed.`,\n              severity: monaco.MarkerSeverity.Error,\n              ...boundary,\n            }));\n\n            onTypeDebounced(query);\n            monaco.editor.setModelMarkers(model, 'owner', markers);\n          });\n          const dataProvider = new CompletionDataProvider(langProviderRef.current, historyRef);\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registered to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(LANG_ID, filteringCompletionProvider);\n\n          autocompleteCleanupCallback.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const handleResize = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(handleResize);\n          handleResize();\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(\n            monaco.KeyMod.Shift | monaco.KeyCode.Enter,\n            () => {\n              onRunQueryRef.current(editor.getValue());\n            },\n            'isEditorFocused' + id\n          );\n\n          editor.onDidFocusEditorText(() => {\n            isEditorFocused.set(true);\n            if (editor.getValue().trim() === '') {\n              editor.trigger('', 'editor.action.triggerSuggest', {});\n            }\n          });\n\n          setPlaceholder(monaco, editor);\n        }}\n      />\n    </div>\n  );\n};\n\n// Default export for lazy load.\nexport default MonacoQueryField;\n","export type LabelOperator = '=' | '!=' | '=~' | '!~';\n\nexport type Label = {\n  name: string;\n  value: string;\n  op: LabelOperator;\n};\n\nexport type Situation =\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'AT_ROOT';\n    }\n  | {\n      type: 'IN_LOGFMT';\n      otherLabels: string[];\n      flags: boolean;\n      trailingSpace: boolean;\n      trailingComma: boolean;\n      logQuery: string;\n    }\n  | {\n      type: 'IN_RANGE';\n    }\n  | {\n      type: 'IN_AGGREGATION';\n    }\n  | {\n      type: 'IN_GROUPING';\n      logQuery: string;\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'AFTER_SELECTOR';\n      afterPipe: boolean;\n      hasSpace: boolean;\n      logQuery: string;\n    }\n  | {\n      type: 'AFTER_UNWRAP';\n      logQuery: string;\n    }\n  | {\n      type: 'AFTER_KEEP_AND_DROP';\n      logQuery: string;\n    };\n\n/**\n * THIS METHOD IS KNOWN TO BE INCOMPLETE due to the decoupling of the Tempo datasource from Grafana core:\n * Incomplete support for LogQL autocomplete from 'public/app/plugins/datasource/loki/components/monaco-query-field/monaco-completion-provider/situation.ts';\n */\nexport const getSituation = (text: string, pos: number): Situation | null => {\n  return {\n    type: 'EMPTY',\n  };\n};\n"],"names":["Components","RadioButton","container","Breadcrumbs","breadcrumb","title","TimePicker","openButton","overlayContent","fromField","toField","applyTimeRange","copyTimeRange","pasteTimeRange","calendar","label","closeButton","absoluteTimeRangeTitle","DataSourcePermissions","form","roleType","rolePicker","permissionLevel","DateTimePicker","input","DataSource","TestData","QueryTab","scenarioSelectContainer","scenarioSelect","max","min","noise","seriesCount","spread","startValue","drop","DataSourceHttpSettings","urlInput","Jaeger","traceIDInput","Prometheus","configPage","connectionSettings","manageAlerts","scrapeInterval","queryTimeout","defaultEditor","disableMetricLookup","prometheusType","prometheusVersion","cacheLevel","incrementalQuerying","queryOverlapWindow","disableRecordingRules","customQueryParameters","httpMethod","exemplarsAddButton","internalLinkSwitch","queryEditor","explain","editorToggle","options","legend","format","step","type","exemplars","builder","metricSelect","hints","metricsExplorer","queryAdvisor","code","queryField","metricsBrowser","selectMetric","metricList","labelNamesFilter","labelValuesFilter","useQuery","useAsRateQuery","validateSelector","clear","exemplarMarker","variableQueryEditor","queryType","labelnames","metricRegex","labelValues","labelSelect","metricNames","varQueryResult","seriesQuery","classicQuery","annotations","minStep","tags","text","seriesValueAsTimestamp","Menu","MenuComponent","MenuGroup","MenuItem","SubMenu","icon","Panels","Panel","headerItems","item","menuItems","menu","containerByTitle","headerCornerInfo","mode","status","loadingBar","HoverWidget","dragIcon","PanelDataErrorMessage","Visualization","Graph","VisualizationTab","legendSection","Legend","legendItemAlias","name","showLegendSwitch","xAxis","labels","BarGauge","value","valueV2","PieChart","svgSlice","Text","Table","header","footer","body","VizLegend","seriesName","Drawer","General","expand","contract","close","rcContentWrapper","subtitle","PanelEditor","content","OptionsPane","select","fieldLabel","DataPane","applyButton","toggleVizPicker","toggleVizOptions","toggleTableView","showZoomField","showAttributionField","showScaleField","showMeasureField","showDebugField","measureButton","PanelInspector","Data","Stats","Json","Query","refreshButton","jsonObjectKeys","Tab","active","RefreshPicker","runButton","intervalButton","runButtonV2","intervalButtonV2","queryInspectorButton","queryHistoryButton","addQuery","QueryHistory","queryText","QueryEditorRows","rows","QueryEditorRow","actionButton","refId","AlertTab","Alert","alert","severity","alertV2","TransformTab","newTransform","transformationEditor","transformationEditorDebugger","Transforms","card","disableTransformationButton","Reduce","modeLabel","calculationsLabel","SpatialOperations","actionLabel","locationLabel","location","autoOption","coords","option","latitudeFieldLabel","longitudeFieldLabel","geohash","geohashFieldLabel","lookup","lookupFieldLabel","gazetteerFieldLabel","searchInput","noTransformationsMessage","addTransformationButton","removeAllTransformationsButton","NavBar","Configuration","button","Toggle","Reporting","NavMenu","NavToolbar","PageToolbar","tooltip","itemButton","QueryEditorToolbarItem","BackButton","backArrow","OptionsGroup","group","toggle","PluginVisualization","current","Select","singleValue","FieldConfigEditor","OverridesConfigEditor","FolderPicker","containerV2","ReadonlyFolderPicker","DataSourcePicker","inputV2","dataSourceList","advancedModal","builtInDataSourceList","TimeZonePicker","WeekStartPicker","placeholder","TraceViewer","spanBar","QueryField","QueryBuilder","queryPatterns","valueSelect","matchOperatorSelect","ValuePicker","Search","section","sectionV2","items","itemsV2","cards","collapseFolder","sectionId","expandFolder","dashboardItem","dashboardItems","dashboardCard","folderHeader","folderName","folderContent","DashboardLinks","dropDown","link","LoadingIndicator","CallToActionCard","buttonV2","DataLinksContextMenu","singleLink","CodeEditor","DashboardImportPage","textarea","submit","ImportDashboardForm","PanelAlertTabContent","VisualizationPreview","ColorSwatch","DashboardRow","UserProfile","profileSaveButton","preferencesSaveButton","orgsTable","sessionsTable","extensionPointTabs","extensionPointTab","tabId","FileUpload","inputField","fileNameSpan","DebugOverlay","wrapper","OrgRolePicker","AnalyticsToolbarButton","Variables","variableOption","Annotations","annotationsTypeInput","annotationsChoosePanelInput","Tooltip","selectors","pages","Login","url","username","password","skip","Home","delete","readOnly","saveAndTest","DataSources","dataSources","dataSourceName","EditDataSource","dataSourceUid","settings","AddDataSource","dataSourcePlugins","pluginName","dataSourcePluginsV2","ConfirmModal","AddDashboard","addNewPanel","addNewRow","addNewPanelLibrary","Dashboard","uid","DashNav","nav","navV2","publicDashboardTag","shareButton","submenu","submenuItem","submenuItemLabels","submenuItemValueDropDownValueLinkTexts","submenuItemValueDropDownDropDown","submenuItemValueDropDownOptionTexts","annotationsWrapper","annotationLabel","annotationToggle","Settings","Actions","deleteDashBoard","sectionItems","saveDashBoard","saveAsDashBoard","timezone","List","addAnnotationCTA","addAnnotationCTAV2","NewAnnotation","panelFilterSelect","showInLabel","previewInDashboard","apply","enable","hide","addVariableCTA","addVariableCTAV2","newButton","table","tableRowNameFields","variableName","tableRowDefinitionFields","tableRowArrowUpButtons","tableRowArrowDownButtons","tableRowDuplicateButtons","tableRowRemoveButtons","Edit","headerLink","modeLabelNew","modeLabelEdit","generalNameInput","generalNameInputV2","generalTypeSelect","generalTypeSelectV2","generalLabelInput","generalLabelInputV2","generalHideSelect","generalHideSelectV2","selectionOptionsMultiSwitch","selectionOptionsIncludeAllSwitch","selectionOptionsCustomAllInput","previewOfValuesOption","submitButton","QueryVariable","queryOptionsDataSourceSelect","queryOptionsRefreshSelect","queryOptionsRefreshSelectV2","queryOptionsRegExInput","queryOptionsRegExInputV2","queryOptionsSortSelect","queryOptionsSortSelectV2","queryOptionsQueryInput","valueGroupsTagsEnabledSwitch","valueGroupsTagsTagsQueryInput","valueGroupsTagsTagsValuesQueryInput","ConstantVariable","constantOptionsQueryInput","constantOptionsQueryInputV2","DatasourceVariable","datasourceSelect","TextBoxVariable","textBoxOptionsQueryInput","textBoxOptionsQueryInputV2","CustomVariable","customValueInput","IntervalVariable","intervalsValueInput","autoEnabledCheckbox","stepCountIntervalSelect","minIntervalInput","GroupByVariable","dataSourceSelect","infoText","modeToggle","AdHocFiltersVariable","marker","Rows","Repeated","ConfigSection","warningMessage","Dashboards","dashboards","SaveDashboardAsModal","newName","save","SaveDashboardModal","saveVariables","saveTimerange","SharePanelModal","linkToRenderedImage","ShareDashboardModal","PublicDashboard","WillBePublicCheckbox","LimitedDSCheckbox","CostIncreaseCheckbox","PauseSwitch","EnableAnnotationsSwitch","CreateButton","DeleteButton","CopyUrlInput","CopyUrlButton","SettingsDropdown","TemplateVariablesWarningAlert","UnsupportedDataSourcesWarningAlert","NoUpsertPermissionsWarningAlert","EnableTimeRangeSwitch","EmailSharingConfiguration","Container","ShareType","EmailSharingInput","EmailSharingInviteButton","EmailSharingList","DeleteEmail","ReshareLink","page","NotAvailable","pausedDescription","RequestViewAccess","recipientInput","PublicDashboardConfirmAccess","Explore","graph","scrollView","SoloPanel","PluginsList","list","listItem","signatureErrorNotice","PluginPage","signatureInfo","disabledInfo","PlaylistForm","interval","itemDelete","BrowseDashboards","row","checkbox","NewFolderForm","nameInput","createButton","FolderView","PublicDashboards","ListItem","linkButton","configButton","trashcanButton","pauseSwitch","UserListPage","tabs","allUsers","orgUsers","anonUserDevices","publicDashboardsUsers","users","org","admin","publicDashboards","UserListAdminPage","UsersListPage","UserAnonListPage","UsersListPublicDashboardsPage","DashboardsListModal","ProfilePage","components","overrideServices","storageService","strings","Map","set","toString","onDidChangeValue","data","onDidChangeTarget","onWillSaveState","get","key","scope","fallbackValue","getBoolean","val","undefined","getNumber","parseInt","store","target","remove","keys","Array","from","logStorage","console","log","migrate","Promise","resolve","isNew","flush","reason","makeStorageService","NeverCaseError","Error","constructor","super","JSON","stringify","DURATION_COMPLETIONS","map","insertText","getCompletions","situation","dataProvider","getMonacoCompletionItemKind","monaco","languages","CompletionItemKind","Unit","Variable","Snippet","Enum","EnumMember","Constructor","Class","TypeParameter","Interface","CompletionDataProvider","buildSelector","op","labelValue","replace","join","getHistory","chain","this","historyRef","history","query","expr","filter","uniq","getLabelNames","otherLabels","length","languageProvider","getLabelKeys","getSeriesLabels","possibleLabelNames","Object","usedLabelNames","Set","l","has","getLabelValues","labelName","fetchLabelValues","logQuery","cachedLabelKeys","queryToLabelKeysCache","size","firstKey","next","labelKeys","getParserAndLabelKeys","fetchSeriesLabels","then","parseQuery","parser","parseErrors","parse","iterate","enter","nodeRef","id","node","push","substring","to","isErrorBoundary","boundary","placeHolderScopedVars","__interval","__rate_interval","__auto","__interval_ms","__range_ms","__range_s","__range","codeLens","contextmenu","fixedOverflowWidgets","folding","fontSize","lineDecorationsWidth","lineNumbers","minimap","enabled","overviewRulerBorder","overviewRulerLanes","padding","top","bottom","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","alwaysConsumeMouseWheel","scrollBeyondLastLine","suggest","showWords","suggestFontSize","wordWrap","LANG_ID","LANGUAGE_SETUP_STARTED","defaultWordPattern","onBlur","onRunQuery","initialValue","datasource","onChange","uuidv4","overrideServicesRef","useRef","containerRef","langProviderRef","useLatest","onRunQueryRef","onBlurRef","autocompleteCleanupCallback","styles","theme","css","shape","radius","default","borderColor","typography","fontFamilyMonospace","getStyles","useTheme2","useEffect","onTypeDebounced","debounce","div","aria-label","className","ref","ReactMonacoEditor","language","beforeMount","register","setMonarchTokensProvider","monarchlanguage","setLanguageConfiguration","languageConfiguration","wordPattern","ensureLogQL","onMount","editor","isEditorFocused","createContextKey","onDidBlurEditorWidget","getValue","onDidChangeModelContent","e","model","getModel","errors","interpolatedQuery","queryLines","interpolatedErrors","queryErrors","flatMap","interpolatedError","queryError","parseError","isEmptyString","errorNode","parent","error","startLineNumber","startColumn","endLineNumber","endColumn","startPos","endPos","line","findErrorBoundary","validateQuery","interpolateString","getLinesContent","markers","message","MarkerSeverity","setModelMarkers","completionProvider","triggerCharacters","provideCompletionItems","position","word","getWordAtPosition","wordUntil","getWordUntilPosition","positionClone","column","lineNumber","getOffsetAt","range","betweenQuotes","indexOfFirstQuote","indexOf","indexOfLastQuote","lastIndexOf","indexOfEquals","indexOfLastEquals","Range","lift","fromPositions","calculateRange","maxIndexDigits","suggestions","index","kind","insertTextRules","isSnippet","detail","documentation","sortText","padStart","command","triggerOnInsert","getCompletionProvider","filteringCompletionProvider","context","token","dispose","registerCompletionItemProvider","handleResize","containerDiv","pixelHeight","getContentHeight","style","height","pixelWidth","clientWidth","layout","width","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","onDidFocusEditorText","trim","trigger","placeholderDecorators","isWholeLine","decorators","checkDecorators","newDecorators","getValueLength","deltaDecorations","setPlaceholder"],"sourceRoot":""}